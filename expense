#!/usr/bin/env python

from datetime import date
from textwrap import dedent
import sys

from contextlib import contextmanager 

import psycopg2
from psycopg2 import extras

class CLI:
    def __init__(self):
        self.application = ExpenseData()
    def run(self, my_list):
        if not my_list:
            self.display_help()
        elif my_list[0] == 'add' and len(my_list) == 1:
            print("You must provide an amount and memo.")
        elif my_list[0] == 'list':
            self.application.list_expenses()
        elif my_list[0] == 'search':
            if len(my_list) <= 1:
                print("You must provide a search query.")
                return
            search_term = my_list[1]
            self.application.search_expenses(search_term)
        elif my_list[0] == 'delete':
            if len(my_list) <= 1:
                print("You must provide an id.")
                return
            id = my_list[1]
            # print('id', id)
            self.application.delete_expense(id)
        elif my_list[0] == 'clear':
            answer = input("This will remove all expenses. Are you sure? (enter y to confirm)")
            if answer.casefold() == 'y':
                self.application.delete_all_expenses()
            else:
                return
        elif len(my_list) >= 3:
            amount = my_list[1]
            memo = my_list[2]
            self.application.add_expense(amount, memo)

    def display_help(self):
        print(dedent("""
            An expense recording system

            Commands:

            add AMOUNT MEMO - record a new expense
            clear - delete all expenses
            list - list all expenses
            delete NUMBER - remove expense with id NUMBER
            search QUERY - list expenses with a matching memo field
    """))

class ExpenseData:
    @contextmanager
    def _database_connect(self):
        connection = psycopg2.connect(dbname='expenses')
        try:
            with connection:
                yield connection
        finally:
            connection.close()
    
    def list_expenses(self):
        with self._database_connect() as my_connection:
            with my_connection.cursor(cursor_factory=extras.DictCursor) as cursor:
                cursor.execute("""SELECT * FROM expenses ORDER BY created_on DESC""")
                rows = cursor.fetchall()
                self._display_expenses(rows)
        
    def _display_expenses(self, rows):
        for row in rows: # 
            columns = [
                str(row['id']).rjust(3),
                str(row['created_on']),
                str(row['amount']).rjust(12),
                str(row['memo'])
            ]

            print(' | '.join(columns))

    def add_expense(self, amount, memo):
        with self._database_connect() as my_connection:
            with my_connection.cursor() as cursor:
                cursor.execute("""INSERT INTO expenses (amount, memo, created_on) VALUES (%s, %s, %s)""", (amount, memo, date.today()))
    
    def search_expenses(self, search_term):
        with self._database_connect() as my_connection:
            with my_connection.cursor(cursor_factory=extras.DictCursor) as cursor:
                cursor.execute('''SELECT * FROM expenses WHERE memo ILIKE %s''', (f'%{search_term}%', ))
                rows = cursor.fetchall()
                self._display_expenses(rows)
    def delete_expense(self, idnum):
        with self._database_connect() as my_connection:
            with my_connection.cursor(cursor_factory=extras.DictCursor) as cursor:
                cursor.execute(f'SELECT * FROM expenses WHERE id = %s', (idnum, ))
                result = cursor.fetchone()
                if result:
                    cursor.execute('DELETE FROM expenses where id = %s', (idnum,))
                    print(f'The following expense has been deleted:')
                    self._display_expenses([result])
                else:
                    print(f"There is no expense with id {id}.")
                    return
    def delete_all_expenses(self):
        try:
            with self._database_connect() as my_connection:
                with my_connection.cursor() as cursor:
                    cursor.execute('DELETE FROM expenses')
                    print("All expenses have been deleted.")
        finally:
            my_connection.close()
if __name__ == '__main__':
    cli = CLI()
    cli.run(sys.argv[1:]) # [./expense, add 1.25 'Coffee']
